<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Portfolio Website</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #1e1e2f, #33334d);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      overflow: hidden;
    }

    header {
      position: absolute;
      top: 20px;
      text-align: center;
    }

    header h1 {
      font-size: 2.5em;
    }

    header p {
      font-size: 1.2em;
      color: #a8a8d0;
    }

    #canvas-container {
      width: 100%;
      height: 80vh;
    }

    footer {
      position: absolute;
      bottom: 10px;
      text-align: center;
      font-size: 0.8em;
    }
  </style>
</head>
<body>
  <header>
    <h1>My 3D Portfolio</h1>
    <p>Explore my work in an interactive 3D space!</p>
  </header>
  <main>
    <div id="canvas-container"></div>
  </main>
  <footer>
    <p>&copy; 2024 My Portfolio. All Rights Reserved.</p>
  </footer>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r136/three.min.js"></script>
  <script>
    // Select the container for the 3D canvas
    const container = document.getElementById("canvas-container");

    // Create a scene
    const scene = new THREE.Scene();

    // Create a camera
    const camera = new THREE.PerspectiveCamera(
      75, 
      window.innerWidth / window.innerHeight, 
      0.1, 
      1000
    );
    camera.position.z = 5;

    // Create a renderer
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);

    // Create a cube geometry
    const geometry = new THREE.BoxGeometry();
    const materials = [
      new THREE.MeshBasicMaterial({ color: 0xff5555, side: THREE.DoubleSide }),
      new THREE.MeshBasicMaterial({ color: 0x55ff55, side: THREE.DoubleSide }),
      new THREE.MeshBasicMaterial({ color: 0x5555ff, side: THREE.DoubleSide }),
      new THREE.MeshBasicMaterial({ color: 0xffff55, side: THREE.DoubleSide }),
      new THREE.MeshBasicMaterial({ color: 0xff55ff, side: THREE.DoubleSide }),
      new THREE.MeshBasicMaterial({ color: 0x55ffff, side: THREE.DoubleSide })
    ];
    const cube = new THREE.Mesh(geometry, materials);

    // Add the cube to the scene
    scene.add(cube);

    // Add ambient light
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    // Add a point light
    const pointLight = new THREE.PointLight(0xffffff, 1);
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);

      // Rotate the cube
      cube.rotation.x += 0.01;
      cube.rotation.y += 0.01;

      // Render the scene
      renderer.render(scene, camera);
    }

    // Handle window resizing
    window.addEventListener("resize", () => {
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
    });

    // Start the animation loop
    animate();
  </script>
</body>
</html>
